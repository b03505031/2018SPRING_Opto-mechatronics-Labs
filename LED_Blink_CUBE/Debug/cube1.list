
cube1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001298  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800142c  0800142c  0001142c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800145c  0800145c  0001145c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001460  08001460  00011460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000060  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000064  20000064  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fb83  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e5d  00000000  00000000  0002fbb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005b24  00000000  00000000  00031a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000700  00000000  00000000  00037538  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000a48  00000000  00000000  00037c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000437b  00000000  00000000  00038680  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000031d6  00000000  00000000  0003c9fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003fbd1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001400  00000000  00000000  0003fc50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001414 	.word	0x08001414

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08001414 	.word	0x08001414

080001d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001d4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001d6:	4b08      	ldr	r3, [pc, #32]	; (80001f8 <HAL_InitTick+0x24>)
{
 80001d8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e4:	f000 f880 	bl	80002e8 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80001e8:	2200      	movs	r2, #0
 80001ea:	4621      	mov	r1, r4
 80001ec:	f04f 30ff 	mov.w	r0, #4294967295
 80001f0:	f000 f846 	bl	8000280 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001f4:	2000      	movs	r0, #0
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000000 	.word	0x20000000

080001fc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001fc:	4a07      	ldr	r2, [pc, #28]	; (800021c <HAL_Init+0x20>)
{
 80001fe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000200:	6813      	ldr	r3, [r2, #0]
 8000202:	f043 0310 	orr.w	r3, r3, #16
 8000206:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000208:	2003      	movs	r0, #3
 800020a:	f000 f827 	bl	800025c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800020e:	2000      	movs	r0, #0
 8000210:	f7ff ffe0 	bl	80001d4 <HAL_InitTick>
  HAL_MspInit();
 8000214:	f001 f81a 	bl	800124c <HAL_MspInit>
}
 8000218:	2000      	movs	r0, #0
 800021a:	bd08      	pop	{r3, pc}
 800021c:	40022000 	.word	0x40022000

08000220 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000220:	4a02      	ldr	r2, [pc, #8]	; (800022c <HAL_IncTick+0xc>)
 8000222:	6813      	ldr	r3, [r2, #0]
 8000224:	3301      	adds	r3, #1
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000020 	.word	0x20000020

08000230 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <HAL_GetTick+0x8>)
 8000232:	6818      	ldr	r0, [r3, #0]
}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20000020 	.word	0x20000020

0800023c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800023c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800023e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000240:	f7ff fff6 	bl	8000230 <HAL_GetTick>
  uint32_t wait = Delay;
 8000244:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000246:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000248:	4605      	mov	r5, r0
  {
     wait++;
 800024a:	bf18      	it	ne
 800024c:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800024e:	f7ff ffef 	bl	8000230 <HAL_GetTick>
 8000252:	1b40      	subs	r0, r0, r5
 8000254:	42a0      	cmp	r0, r4
 8000256:	d3fa      	bcc.n	800024e <HAL_Delay+0x12>
  {
  }
}
 8000258:	b003      	add	sp, #12
 800025a:	bd30      	pop	{r4, r5, pc}

0800025c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800025c:	4a07      	ldr	r2, [pc, #28]	; (800027c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000260:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000264:	041b      	lsls	r3, r3, #16
 8000266:	0c1b      	lsrs	r3, r3, #16
 8000268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800026c:	0200      	lsls	r0, r0, #8
 800026e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000272:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000276:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000278:	60d3      	str	r3, [r2, #12]
 800027a:	4770      	bx	lr
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000282:	b530      	push	{r4, r5, lr}
 8000284:	68dc      	ldr	r4, [r3, #12]
 8000286:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000290:	2b04      	cmp	r3, #4
 8000292:	bf28      	it	cs
 8000294:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000298:	f04f 0501 	mov.w	r5, #1
 800029c:	fa05 f303 	lsl.w	r3, r5, r3
 80002a0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a4:	bf8c      	ite	hi
 80002a6:	3c03      	subhi	r4, #3
 80002a8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002aa:	4019      	ands	r1, r3
 80002ac:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ae:	fa05 f404 	lsl.w	r4, r5, r4
 80002b2:	3c01      	subs	r4, #1
 80002b4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b8:	ea42 0201 	orr.w	r2, r2, r1
 80002bc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	bfaf      	iteee	ge
 80002c2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c6:	f000 000f 	andlt.w	r0, r0, #15
 80002ca:	4b06      	ldrlt	r3, [pc, #24]	; (80002e4 <HAL_NVIC_SetPriority+0x64>)
 80002cc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ce:	bfa5      	ittet	ge
 80002d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002dc:	bd30      	pop	{r4, r5, pc}
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00
 80002e4:	e000ed14 	.word	0xe000ed14

080002e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002e8:	3801      	subs	r0, #1
 80002ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002ee:	d20a      	bcs.n	8000306 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	21f0      	movs	r1, #240	; 0xf0
 80002f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000300:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000306:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000e010 	.word	0xe000e010
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000314:	4b04      	ldr	r3, [pc, #16]	; (8000328 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000316:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000318:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800031a:	bf0c      	ite	eq
 800031c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000320:	f022 0204 	bicne.w	r2, r2, #4
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	4770      	bx	lr
 8000328:	e000e010 	.word	0xe000e010

0800032c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800032c:	4770      	bx	lr

0800032e <HAL_SYSTICK_IRQHandler>:
{
 800032e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000330:	f7ff fffc 	bl	800032c <HAL_SYSTICK_Callback>
 8000334:	bd08      	pop	{r3, pc}
	...

08000338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000340:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80004d4 <HAL_GPIO_Init+0x19c>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000344:	4a61      	ldr	r2, [pc, #388]	; (80004cc <HAL_GPIO_Init+0x194>)
  uint32_t position = 0x00U;
 8000346:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000348:	fa38 f403 	lsrs.w	r4, r8, r3
 800034c:	d102      	bne.n	8000354 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  }
}
 800034e:	b003      	add	sp, #12
 8000350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000354:	f04f 0e01 	mov.w	lr, #1
 8000358:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 800035c:	ea18 060e 	ands.w	r6, r8, lr
 8000360:	f000 80a6 	beq.w	80004b0 <HAL_GPIO_Init+0x178>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000364:	684c      	ldr	r4, [r1, #4]
 8000366:	f024 0710 	bic.w	r7, r4, #16
 800036a:	2f02      	cmp	r7, #2
 800036c:	d116      	bne.n	800039c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 800036e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000372:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000376:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 800037a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800037e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000382:	f04f 0c0f 	mov.w	ip, #15
 8000386:	fa0c fc0b 	lsl.w	ip, ip, fp
 800038a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800038e:	690d      	ldr	r5, [r1, #16]
 8000390:	fa05 f50b 	lsl.w	r5, r5, fp
 8000394:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000398:	f8ca 5020 	str.w	r5, [sl, #32]
 800039c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80003a2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003a6:	fa05 f50a 	lsl.w	r5, r5, sl
 80003aa:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ac:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003b0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003b4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ba:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003be:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80003c0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003c4:	d811      	bhi.n	80003ea <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80003c6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003cc:	68cf      	ldr	r7, [r1, #12]
 80003ce:	fa07 fc0a 	lsl.w	ip, r7, sl
 80003d2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80003d6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80003d8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003da:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003de:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80003e2:	409f      	lsls	r7, r3
 80003e4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80003e8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80003ea:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003ec:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003ee:	688f      	ldr	r7, [r1, #8]
 80003f0:	fa07 f70a 	lsl.w	r7, r7, sl
 80003f4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80003f6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003f8:	00e5      	lsls	r5, r4, #3
 80003fa:	d559      	bpl.n	80004b0 <HAL_GPIO_Init+0x178>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	f8d9 5018 	ldr.w	r5, [r9, #24]
 8000400:	f045 0501 	orr.w	r5, r5, #1
 8000404:	f8c9 5018 	str.w	r5, [r9, #24]
 8000408:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800040c:	f023 0703 	bic.w	r7, r3, #3
 8000410:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000414:	f005 0501 	and.w	r5, r5, #1
 8000418:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800041c:	9501      	str	r5, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800041e:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000422:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000424:	68bd      	ldr	r5, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000426:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800042a:	f04f 0e0f 	mov.w	lr, #15
 800042e:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000432:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000436:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800043a:	d03b      	beq.n	80004b4 <HAL_GPIO_Init+0x17c>
 800043c:	4d24      	ldr	r5, [pc, #144]	; (80004d0 <HAL_GPIO_Init+0x198>)
 800043e:	42a8      	cmp	r0, r5
 8000440:	d03a      	beq.n	80004b8 <HAL_GPIO_Init+0x180>
 8000442:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000446:	42a8      	cmp	r0, r5
 8000448:	d038      	beq.n	80004bc <HAL_GPIO_Init+0x184>
 800044a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800044e:	42a8      	cmp	r0, r5
 8000450:	d036      	beq.n	80004c0 <HAL_GPIO_Init+0x188>
 8000452:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000456:	42a8      	cmp	r0, r5
 8000458:	d034      	beq.n	80004c4 <HAL_GPIO_Init+0x18c>
 800045a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800045e:	42a8      	cmp	r0, r5
 8000460:	d032      	beq.n	80004c8 <HAL_GPIO_Init+0x190>
 8000462:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000466:	42a8      	cmp	r0, r5
 8000468:	bf14      	ite	ne
 800046a:	2507      	movne	r5, #7
 800046c:	2506      	moveq	r5, #6
 800046e:	fa05 f50c 	lsl.w	r5, r5, ip
 8000472:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000476:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000478:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800047a:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800047c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000480:	bf0c      	ite	eq
 8000482:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000484:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000486:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000488:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800048e:	bf0c      	ite	eq
 8000490:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000492:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000494:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000496:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000498:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800049c:	bf0c      	ite	eq
 800049e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80004a0:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 80004a2:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80004a4:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004a6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004a8:	bf54      	ite	pl
 80004aa:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80004ac:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 80004ae:	60d5      	str	r5, [r2, #12]
    position++;
 80004b0:	3301      	adds	r3, #1
 80004b2:	e749      	b.n	8000348 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004b4:	2500      	movs	r5, #0
 80004b6:	e7da      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004b8:	2501      	movs	r5, #1
 80004ba:	e7d8      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004bc:	2502      	movs	r5, #2
 80004be:	e7d6      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004c0:	2503      	movs	r5, #3
 80004c2:	e7d4      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004c4:	2504      	movs	r5, #4
 80004c6:	e7d2      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004c8:	2505      	movs	r5, #5
 80004ca:	e7d0      	b.n	800046e <HAL_GPIO_Init+0x136>
 80004cc:	40010400 	.word	0x40010400
 80004d0:	48000400 	.word	0x48000400
 80004d4:	40021000 	.word	0x40021000

080004d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004d8:	b10a      	cbz	r2, 80004de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004da:	6181      	str	r1, [r0, #24]
 80004dc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004de:	6281      	str	r1, [r0, #40]	; 0x28
 80004e0:	4770      	bx	lr

080004e2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004e2:	6943      	ldr	r3, [r0, #20]
 80004e4:	4059      	eors	r1, r3
 80004e6:	6141      	str	r1, [r0, #20]
 80004e8:	4770      	bx	lr
	...

080004ec <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004ec:	6803      	ldr	r3, [r0, #0]
{
 80004ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004f2:	07df      	lsls	r7, r3, #31
{
 80004f4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004f6:	d411      	bmi.n	800051c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004f8:	682b      	ldr	r3, [r5, #0]
 80004fa:	079e      	lsls	r6, r3, #30
 80004fc:	f100 808b 	bmi.w	8000616 <HAL_RCC_OscConfig+0x12a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000500:	682b      	ldr	r3, [r5, #0]
 8000502:	071c      	lsls	r4, r3, #28
 8000504:	f100 80fe 	bmi.w	8000704 <HAL_RCC_OscConfig+0x218>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000508:	682b      	ldr	r3, [r5, #0]
 800050a:	0758      	lsls	r0, r3, #29
 800050c:	f100 8147 	bmi.w	800079e <HAL_RCC_OscConfig+0x2b2>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000510:	69aa      	ldr	r2, [r5, #24]
 8000512:	2a00      	cmp	r2, #0
 8000514:	f040 81dd 	bne.w	80008d2 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000518:	2000      	movs	r0, #0
 800051a:	e024      	b.n	8000566 <HAL_RCC_OscConfig+0x7a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800051c:	4cbd      	ldr	r4, [pc, #756]	; (8000814 <HAL_RCC_OscConfig+0x328>)
 800051e:	6863      	ldr	r3, [r4, #4]
 8000520:	f003 030c 	and.w	r3, r3, #12
 8000524:	2b04      	cmp	r3, #4
 8000526:	d00a      	beq.n	800053e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000528:	6863      	ldr	r3, [r4, #4]
 800052a:	f003 030c 	and.w	r3, r3, #12
 800052e:	2b08      	cmp	r3, #8
 8000530:	d11c      	bne.n	800056c <HAL_RCC_OscConfig+0x80>
 8000532:	6863      	ldr	r3, [r4, #4]
 8000534:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800053c:	d116      	bne.n	800056c <HAL_RCC_OscConfig+0x80>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800053e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000542:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000546:	6821      	ldr	r1, [r4, #0]
 8000548:	fa93 f3a3 	rbit	r3, r3
 800054c:	fab3 f383 	clz	r3, r3
 8000550:	f003 031f 	and.w	r3, r3, #31
 8000554:	2201      	movs	r2, #1
 8000556:	fa02 f303 	lsl.w	r3, r2, r3
 800055a:	420b      	tst	r3, r1
 800055c:	d0cc      	beq.n	80004f8 <HAL_RCC_OscConfig+0xc>
 800055e:	686b      	ldr	r3, [r5, #4]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1c9      	bne.n	80004f8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000564:	2001      	movs	r0, #1
}
 8000566:	b002      	add	sp, #8
 8000568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800056c:	686b      	ldr	r3, [r5, #4]
 800056e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000572:	d11e      	bne.n	80005b2 <HAL_RCC_OscConfig+0xc6>
 8000574:	6823      	ldr	r3, [r4, #0]
 8000576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800057a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800057c:	f7ff fe58 	bl	8000230 <HAL_GetTick>
 8000580:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000584:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000586:	2701      	movs	r7, #1
 8000588:	fa96 f3a6 	rbit	r3, r6
 800058c:	6822      	ldr	r2, [r4, #0]
 800058e:	fa96 f3a6 	rbit	r3, r6
 8000592:	fab3 f383 	clz	r3, r3
 8000596:	f003 031f 	and.w	r3, r3, #31
 800059a:	fa07 f303 	lsl.w	r3, r7, r3
 800059e:	4213      	tst	r3, r2
 80005a0:	d1aa      	bne.n	80004f8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005a2:	f7ff fe45 	bl	8000230 <HAL_GetTick>
 80005a6:	eba0 0008 	sub.w	r0, r0, r8
 80005aa:	2864      	cmp	r0, #100	; 0x64
 80005ac:	d9ec      	bls.n	8000588 <HAL_RCC_OscConfig+0x9c>
            return HAL_TIMEOUT;
 80005ae:	2003      	movs	r0, #3
 80005b0:	e7d9      	b.n	8000566 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b2:	bb0b      	cbnz	r3, 80005f8 <HAL_RCC_OscConfig+0x10c>
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ba:	6023      	str	r3, [r4, #0]
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005c4:	f7ff fe34 	bl	8000230 <HAL_GetTick>
 80005c8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005cc:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ce:	2701      	movs	r7, #1
 80005d0:	fa96 f3a6 	rbit	r3, r6
 80005d4:	6822      	ldr	r2, [r4, #0]
 80005d6:	fa96 f3a6 	rbit	r3, r6
 80005da:	fab3 f383 	clz	r3, r3
 80005de:	f003 031f 	and.w	r3, r3, #31
 80005e2:	fa07 f303 	lsl.w	r3, r7, r3
 80005e6:	4213      	tst	r3, r2
 80005e8:	d086      	beq.n	80004f8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ea:	f7ff fe21 	bl	8000230 <HAL_GetTick>
 80005ee:	eba0 0008 	sub.w	r0, r0, r8
 80005f2:	2864      	cmp	r0, #100	; 0x64
 80005f4:	d9ec      	bls.n	80005d0 <HAL_RCC_OscConfig+0xe4>
 80005f6:	e7da      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005fc:	6823      	ldr	r3, [r4, #0]
 80005fe:	d103      	bne.n	8000608 <HAL_RCC_OscConfig+0x11c>
 8000600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000604:	6023      	str	r3, [r4, #0]
 8000606:	e7b5      	b.n	8000574 <HAL_RCC_OscConfig+0x88>
 8000608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800060c:	6023      	str	r3, [r4, #0]
 800060e:	6823      	ldr	r3, [r4, #0]
 8000610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000614:	e7b1      	b.n	800057a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000616:	4c7f      	ldr	r4, [pc, #508]	; (8000814 <HAL_RCC_OscConfig+0x328>)
 8000618:	6863      	ldr	r3, [r4, #4]
 800061a:	f013 0f0c 	tst.w	r3, #12
 800061e:	d00a      	beq.n	8000636 <HAL_RCC_OscConfig+0x14a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000620:	6863      	ldr	r3, [r4, #4]
 8000622:	f003 030c 	and.w	r3, r3, #12
 8000626:	2b08      	cmp	r3, #8
 8000628:	d124      	bne.n	8000674 <HAL_RCC_OscConfig+0x188>
 800062a:	6863      	ldr	r3, [r4, #4]
 800062c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000634:	d11e      	bne.n	8000674 <HAL_RCC_OscConfig+0x188>
 8000636:	2302      	movs	r3, #2
 8000638:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800063c:	6821      	ldr	r1, [r4, #0]
 800063e:	fa93 f3a3 	rbit	r3, r3
 8000642:	fab3 f383 	clz	r3, r3
 8000646:	f003 031f 	and.w	r3, r3, #31
 800064a:	2201      	movs	r2, #1
 800064c:	fa02 f303 	lsl.w	r3, r2, r3
 8000650:	420b      	tst	r3, r1
 8000652:	d002      	beq.n	800065a <HAL_RCC_OscConfig+0x16e>
 8000654:	68eb      	ldr	r3, [r5, #12]
 8000656:	4293      	cmp	r3, r2
 8000658:	d184      	bne.n	8000564 <HAL_RCC_OscConfig+0x78>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800065a:	6821      	ldr	r1, [r4, #0]
 800065c:	23f8      	movs	r3, #248	; 0xf8
 800065e:	fa93 f3a3 	rbit	r3, r3
 8000662:	fab3 f283 	clz	r2, r3
 8000666:	692b      	ldr	r3, [r5, #16]
 8000668:	4093      	lsls	r3, r2
 800066a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800066e:	4313      	orrs	r3, r2
 8000670:	6023      	str	r3, [r4, #0]
 8000672:	e745      	b.n	8000500 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000674:	68ea      	ldr	r2, [r5, #12]
 8000676:	2601      	movs	r6, #1
 8000678:	b30a      	cbz	r2, 80006be <HAL_RCC_OscConfig+0x1d2>
 800067a:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800067e:	fab3 f383 	clz	r3, r3
 8000682:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000686:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	2702      	movs	r7, #2
 800068e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000690:	f7ff fdce 	bl	8000230 <HAL_GetTick>
 8000694:	4680      	mov	r8, r0
 8000696:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800069a:	6822      	ldr	r2, [r4, #0]
 800069c:	fa97 f3a7 	rbit	r3, r7
 80006a0:	fab3 f383 	clz	r3, r3
 80006a4:	f003 031f 	and.w	r3, r3, #31
 80006a8:	fa06 f303 	lsl.w	r3, r6, r3
 80006ac:	4213      	tst	r3, r2
 80006ae:	d1d4      	bne.n	800065a <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b0:	f7ff fdbe 	bl	8000230 <HAL_GetTick>
 80006b4:	eba0 0008 	sub.w	r0, r0, r8
 80006b8:	2802      	cmp	r0, #2
 80006ba:	d9ec      	bls.n	8000696 <HAL_RCC_OscConfig+0x1aa>
 80006bc:	e777      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
 80006be:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006c2:	fab3 f383 	clz	r3, r3
 80006c6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006ca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	2702      	movs	r7, #2
 80006d2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006d4:	f7ff fdac 	bl	8000230 <HAL_GetTick>
 80006d8:	4680      	mov	r8, r0
 80006da:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006de:	6822      	ldr	r2, [r4, #0]
 80006e0:	fa97 f3a7 	rbit	r3, r7
 80006e4:	fab3 f383 	clz	r3, r3
 80006e8:	f003 031f 	and.w	r3, r3, #31
 80006ec:	fa06 f303 	lsl.w	r3, r6, r3
 80006f0:	4213      	tst	r3, r2
 80006f2:	f43f af05 	beq.w	8000500 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006f6:	f7ff fd9b 	bl	8000230 <HAL_GetTick>
 80006fa:	eba0 0008 	sub.w	r0, r0, r8
 80006fe:	2802      	cmp	r0, #2
 8000700:	d9eb      	bls.n	80006da <HAL_RCC_OscConfig+0x1ee>
 8000702:	e754      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000704:	696a      	ldr	r2, [r5, #20]
 8000706:	4e43      	ldr	r6, [pc, #268]	; (8000814 <HAL_RCC_OscConfig+0x328>)
 8000708:	4943      	ldr	r1, [pc, #268]	; (8000818 <HAL_RCC_OscConfig+0x32c>)
 800070a:	2401      	movs	r4, #1
 800070c:	b31a      	cbz	r2, 8000756 <HAL_RCC_OscConfig+0x26a>
 800070e:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000712:	fab3 f383 	clz	r3, r3
 8000716:	440b      	add	r3, r1
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	2702      	movs	r7, #2
 800071c:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 800071e:	f7ff fd87 	bl	8000230 <HAL_GetTick>
 8000722:	4680      	mov	r8, r0
 8000724:	fa97 f3a7 	rbit	r3, r7
 8000728:	fa97 f3a7 	rbit	r3, r7
 800072c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000730:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000732:	fa97 f3a7 	rbit	r3, r7
 8000736:	fab3 f383 	clz	r3, r3
 800073a:	f003 031f 	and.w	r3, r3, #31
 800073e:	fa04 f303 	lsl.w	r3, r4, r3
 8000742:	4213      	tst	r3, r2
 8000744:	f47f aee0 	bne.w	8000508 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000748:	f7ff fd72 	bl	8000230 <HAL_GetTick>
 800074c:	eba0 0008 	sub.w	r0, r0, r8
 8000750:	2802      	cmp	r0, #2
 8000752:	d9e7      	bls.n	8000724 <HAL_RCC_OscConfig+0x238>
 8000754:	e72b      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
 8000756:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800075a:	fab3 f383 	clz	r3, r3
 800075e:	440b      	add	r3, r1
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	2702      	movs	r7, #2
 8000764:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000766:	f7ff fd63 	bl	8000230 <HAL_GetTick>
 800076a:	4680      	mov	r8, r0
 800076c:	fa97 f3a7 	rbit	r3, r7
 8000770:	fa97 f3a7 	rbit	r3, r7
 8000774:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000778:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800077a:	fa97 f3a7 	rbit	r3, r7
 800077e:	fab3 f383 	clz	r3, r3
 8000782:	f003 031f 	and.w	r3, r3, #31
 8000786:	fa04 f303 	lsl.w	r3, r4, r3
 800078a:	4213      	tst	r3, r2
 800078c:	f43f aebc 	beq.w	8000508 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000790:	f7ff fd4e 	bl	8000230 <HAL_GetTick>
 8000794:	eba0 0008 	sub.w	r0, r0, r8
 8000798:	2802      	cmp	r0, #2
 800079a:	d9e7      	bls.n	800076c <HAL_RCC_OscConfig+0x280>
 800079c:	e707      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800079e:	4c1d      	ldr	r4, [pc, #116]	; (8000814 <HAL_RCC_OscConfig+0x328>)
 80007a0:	69e3      	ldr	r3, [r4, #28]
 80007a2:	00d9      	lsls	r1, r3, #3
 80007a4:	d434      	bmi.n	8000810 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	69e3      	ldr	r3, [r4, #28]
 80007a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ac:	61e3      	str	r3, [r4, #28]
 80007ae:	69e3      	ldr	r3, [r4, #28]
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	9301      	str	r3, [sp, #4]
 80007b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007b8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007ba:	4f18      	ldr	r7, [pc, #96]	; (800081c <HAL_RCC_OscConfig+0x330>)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	05da      	lsls	r2, r3, #23
 80007c0:	d52e      	bpl.n	8000820 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007c2:	68ab      	ldr	r3, [r5, #8]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d13c      	bne.n	8000842 <HAL_RCC_OscConfig+0x356>
 80007c8:	6a23      	ldr	r3, [r4, #32]
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007d0:	f7ff fd2e 	bl	8000230 <HAL_GetTick>
 80007d4:	2702      	movs	r7, #2
 80007d6:	4682      	mov	sl, r0
 80007d8:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007da:	f04f 0801 	mov.w	r8, #1
 80007de:	fa97 f3a7 	rbit	r3, r7
 80007e2:	fa97 f3a7 	rbit	r3, r7
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d06b      	beq.n	80008c2 <HAL_RCC_OscConfig+0x3d6>
 80007ea:	6a22      	ldr	r2, [r4, #32]
 80007ec:	fa99 f3a9 	rbit	r3, r9
 80007f0:	fab3 f383 	clz	r3, r3
 80007f4:	f003 031f 	and.w	r3, r3, #31
 80007f8:	fa08 f303 	lsl.w	r3, r8, r3
 80007fc:	4213      	tst	r3, r2
 80007fe:	d057      	beq.n	80008b0 <HAL_RCC_OscConfig+0x3c4>
    if(pwrclkchanged == SET)
 8000800:	2e00      	cmp	r6, #0
 8000802:	f43f ae85 	beq.w	8000510 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000806:	69e3      	ldr	r3, [r4, #28]
 8000808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800080c:	61e3      	str	r3, [r4, #28]
 800080e:	e67f      	b.n	8000510 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000810:	2600      	movs	r6, #0
 8000812:	e7d2      	b.n	80007ba <HAL_RCC_OscConfig+0x2ce>
 8000814:	40021000 	.word	0x40021000
 8000818:	10908120 	.word	0x10908120
 800081c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000826:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000828:	f7ff fd02 	bl	8000230 <HAL_GetTick>
 800082c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	d4c6      	bmi.n	80007c2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000834:	f7ff fcfc 	bl	8000230 <HAL_GetTick>
 8000838:	eba0 0008 	sub.w	r0, r0, r8
 800083c:	2864      	cmp	r0, #100	; 0x64
 800083e:	d9f6      	bls.n	800082e <HAL_RCC_OscConfig+0x342>
 8000840:	e6b5      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000842:	bb3b      	cbnz	r3, 8000894 <HAL_RCC_OscConfig+0x3a8>
 8000844:	6a23      	ldr	r3, [r4, #32]
 8000846:	f023 0301 	bic.w	r3, r3, #1
 800084a:	6223      	str	r3, [r4, #32]
 800084c:	6a23      	ldr	r3, [r4, #32]
 800084e:	f023 0304 	bic.w	r3, r3, #4
 8000852:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000854:	f7ff fcec 	bl	8000230 <HAL_GetTick>
 8000858:	2702      	movs	r7, #2
 800085a:	4682      	mov	sl, r0
 800085c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800085e:	f04f 0801 	mov.w	r8, #1
 8000862:	fa97 f3a7 	rbit	r3, r7
 8000866:	fa97 f3a7 	rbit	r3, r7
 800086a:	b373      	cbz	r3, 80008ca <HAL_RCC_OscConfig+0x3de>
 800086c:	6a22      	ldr	r2, [r4, #32]
 800086e:	fa99 f3a9 	rbit	r3, r9
 8000872:	fab3 f383 	clz	r3, r3
 8000876:	f003 031f 	and.w	r3, r3, #31
 800087a:	fa08 f303 	lsl.w	r3, r8, r3
 800087e:	4213      	tst	r3, r2
 8000880:	d0be      	beq.n	8000800 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000882:	f7ff fcd5 	bl	8000230 <HAL_GetTick>
 8000886:	f241 3388 	movw	r3, #5000	; 0x1388
 800088a:	eba0 000a 	sub.w	r0, r0, sl
 800088e:	4298      	cmp	r0, r3
 8000890:	d9e7      	bls.n	8000862 <HAL_RCC_OscConfig+0x376>
 8000892:	e68c      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000894:	2b05      	cmp	r3, #5
 8000896:	6a23      	ldr	r3, [r4, #32]
 8000898:	d103      	bne.n	80008a2 <HAL_RCC_OscConfig+0x3b6>
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6223      	str	r3, [r4, #32]
 80008a0:	e792      	b.n	80007c8 <HAL_RCC_OscConfig+0x2dc>
 80008a2:	f023 0301 	bic.w	r3, r3, #1
 80008a6:	6223      	str	r3, [r4, #32]
 80008a8:	6a23      	ldr	r3, [r4, #32]
 80008aa:	f023 0304 	bic.w	r3, r3, #4
 80008ae:	e78e      	b.n	80007ce <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b0:	f7ff fcbe 	bl	8000230 <HAL_GetTick>
 80008b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80008b8:	eba0 000a 	sub.w	r0, r0, sl
 80008bc:	4298      	cmp	r0, r3
 80008be:	d98e      	bls.n	80007de <HAL_RCC_OscConfig+0x2f2>
 80008c0:	e675      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
 80008c2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008c8:	e790      	b.n	80007ec <HAL_RCC_OscConfig+0x300>
 80008ca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008d0:	e7cd      	b.n	800086e <HAL_RCC_OscConfig+0x382>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008d2:	4c44      	ldr	r4, [pc, #272]	; (80009e4 <HAL_RCC_OscConfig+0x4f8>)
 80008d4:	6863      	ldr	r3, [r4, #4]
 80008d6:	f003 030c 	and.w	r3, r3, #12
 80008da:	2b08      	cmp	r3, #8
 80008dc:	f43f ae42 	beq.w	8000564 <HAL_RCC_OscConfig+0x78>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008e0:	2a02      	cmp	r2, #2
 80008e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008e6:	d158      	bne.n	800099a <HAL_RCC_OscConfig+0x4ae>
 80008e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008ec:	fab3 f383 	clz	r3, r3
 80008f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008fe:	f7ff fc97 	bl	8000230 <HAL_GetTick>
 8000902:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000906:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000908:	2601      	movs	r6, #1
 800090a:	fa97 f3a7 	rbit	r3, r7
 800090e:	6822      	ldr	r2, [r4, #0]
 8000910:	fa97 f3a7 	rbit	r3, r7
 8000914:	fab3 f383 	clz	r3, r3
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	fa06 f303 	lsl.w	r3, r6, r3
 8000920:	4213      	tst	r3, r2
 8000922:	d133      	bne.n	800098c <HAL_RCC_OscConfig+0x4a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000924:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000926:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000928:	f023 030f 	bic.w	r3, r3, #15
 800092c:	4313      	orrs	r3, r2
 800092e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000930:	6862      	ldr	r2, [r4, #4]
 8000932:	6a2b      	ldr	r3, [r5, #32]
 8000934:	69e9      	ldr	r1, [r5, #28]
 8000936:	f422 1276 	bic.w	r2, r2, #4030464	; 0x3d8000
 800093a:	430b      	orrs	r3, r1
 800093c:	4313      	orrs	r3, r2
 800093e:	6063      	str	r3, [r4, #4]
 8000940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000944:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000948:	fab3 f383 	clz	r3, r3
 800094c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000950:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800095a:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800095c:	f7ff fc68 	bl	8000230 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000960:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000962:	4607      	mov	r7, r0
 8000964:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000968:	6822      	ldr	r2, [r4, #0]
 800096a:	fa95 f3a5 	rbit	r3, r5
 800096e:	fab3 f383 	clz	r3, r3
 8000972:	f003 031f 	and.w	r3, r3, #31
 8000976:	fa06 f303 	lsl.w	r3, r6, r3
 800097a:	4213      	tst	r3, r2
 800097c:	f47f adcc 	bne.w	8000518 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000980:	f7ff fc56 	bl	8000230 <HAL_GetTick>
 8000984:	1bc0      	subs	r0, r0, r7
 8000986:	2802      	cmp	r0, #2
 8000988:	d9ec      	bls.n	8000964 <HAL_RCC_OscConfig+0x478>
 800098a:	e610      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800098c:	f7ff fc50 	bl	8000230 <HAL_GetTick>
 8000990:	eba0 0008 	sub.w	r0, r0, r8
 8000994:	2802      	cmp	r0, #2
 8000996:	d9b8      	bls.n	800090a <HAL_RCC_OscConfig+0x41e>
 8000998:	e609      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
 800099a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009b0:	f7ff fc3e 	bl	8000230 <HAL_GetTick>
 80009b4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009b8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ba:	2601      	movs	r6, #1
 80009bc:	fa95 f3a5 	rbit	r3, r5
 80009c0:	6822      	ldr	r2, [r4, #0]
 80009c2:	fa95 f3a5 	rbit	r3, r5
 80009c6:	fab3 f383 	clz	r3, r3
 80009ca:	f003 031f 	and.w	r3, r3, #31
 80009ce:	fa06 f303 	lsl.w	r3, r6, r3
 80009d2:	4213      	tst	r3, r2
 80009d4:	f43f ada0 	beq.w	8000518 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009d8:	f7ff fc2a 	bl	8000230 <HAL_GetTick>
 80009dc:	1bc0      	subs	r0, r0, r7
 80009de:	2802      	cmp	r0, #2
 80009e0:	d9ec      	bls.n	80009bc <HAL_RCC_OscConfig+0x4d0>
 80009e2:	e5e4      	b.n	80005ae <HAL_RCC_OscConfig+0xc2>
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009e8:	4911      	ldr	r1, [pc, #68]	; (8000a30 <HAL_RCC_GetSysClockFreq+0x48>)
 80009ea:	684b      	ldr	r3, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009ec:	f003 020c 	and.w	r2, r3, #12
 80009f0:	2a08      	cmp	r2, #8
 80009f2:	d11a      	bne.n	8000a2a <HAL_RCC_GetSysClockFreq+0x42>
 80009f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80009f8:	fa92 f2a2 	rbit	r2, r2
 80009fc:	200f      	movs	r0, #15
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009fe:	fab2 f282 	clz	r2, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a02:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000a04:	fa90 f0a0 	rbit	r0, r0
 8000a08:	fab0 f080 	clz	r0, r0
 8000a0c:	f001 010f 	and.w	r1, r1, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a14:	40d3      	lsrs	r3, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a16:	40c1      	lsrs	r1, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_RCC_GetSysClockFreq+0x4c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a1c:	5c41      	ldrb	r1, [r0, r1]
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a1e:	4807      	ldr	r0, [pc, #28]	; (8000a3c <HAL_RCC_GetSysClockFreq+0x54>)
 8000a20:	fbb0 f1f1 	udiv	r1, r0, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000a24:	5cd0      	ldrb	r0, [r2, r3]
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a26:	4348      	muls	r0, r1
 8000a28:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000a2a:	4804      	ldr	r0, [pc, #16]	; (8000a3c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	0800142c 	.word	0x0800142c
 8000a38:	0800143c 	.word	0x0800143c
 8000a3c:	007a1200 	.word	0x007a1200

08000a40 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a40:	4a5c      	ldr	r2, [pc, #368]	; (8000bb4 <HAL_RCC_ClockConfig+0x174>)
 8000a42:	6813      	ldr	r3, [r2, #0]
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	428b      	cmp	r3, r1
{
 8000a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a4e:	4606      	mov	r6, r0
 8000a50:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a52:	d330      	bcc.n	8000ab6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a54:	6832      	ldr	r2, [r6, #0]
 8000a56:	0791      	lsls	r1, r2, #30
 8000a58:	d43a      	bmi.n	8000ad0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a5a:	07d2      	lsls	r2, r2, #31
 8000a5c:	d440      	bmi.n	8000ae0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5e:	4a55      	ldr	r2, [pc, #340]	; (8000bb4 <HAL_RCC_ClockConfig+0x174>)
 8000a60:	6813      	ldr	r3, [r2, #0]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	429d      	cmp	r5, r3
 8000a68:	f0c0 8092 	bcc.w	8000b90 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a6c:	6832      	ldr	r2, [r6, #0]
 8000a6e:	4c52      	ldr	r4, [pc, #328]	; (8000bb8 <HAL_RCC_ClockConfig+0x178>)
 8000a70:	f012 0f04 	tst.w	r2, #4
 8000a74:	f040 8097 	bne.w	8000ba6 <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a78:	0713      	lsls	r3, r2, #28
 8000a7a:	d506      	bpl.n	8000a8a <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a7c:	6863      	ldr	r3, [r4, #4]
 8000a7e:	6932      	ldr	r2, [r6, #16]
 8000a80:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a88:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a8a:	f7ff ffad 	bl	80009e8 <HAL_RCC_GetSysClockFreq>
 8000a8e:	6863      	ldr	r3, [r4, #4]
 8000a90:	22f0      	movs	r2, #240	; 0xf0
 8000a92:	fa92 f2a2 	rbit	r2, r2
 8000a96:	fab2 f282 	clz	r2, r2
 8000a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a9e:	40d3      	lsrs	r3, r2
 8000aa0:	4a46      	ldr	r2, [pc, #280]	; (8000bbc <HAL_RCC_ClockConfig+0x17c>)
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	40d8      	lsrs	r0, r3
 8000aa6:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <HAL_RCC_ClockConfig+0x180>)
 8000aa8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fb92 	bl	80001d4 <HAL_InitTick>
  return HAL_OK;
 8000ab0:	2000      	movs	r0, #0
}
 8000ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ab6:	6813      	ldr	r3, [r2, #0]
 8000ab8:	f023 0307 	bic.w	r3, r3, #7
 8000abc:	430b      	orrs	r3, r1
 8000abe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d0c4      	beq.n	8000a54 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000aca:	2001      	movs	r0, #1
 8000acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ad0:	4939      	ldr	r1, [pc, #228]	; (8000bb8 <HAL_RCC_ClockConfig+0x178>)
 8000ad2:	68b0      	ldr	r0, [r6, #8]
 8000ad4:	684b      	ldr	r3, [r1, #4]
 8000ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ada:	4303      	orrs	r3, r0
 8000adc:	604b      	str	r3, [r1, #4]
 8000ade:	e7bc      	b.n	8000a5a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae0:	6872      	ldr	r2, [r6, #4]
 8000ae2:	4c35      	ldr	r4, [pc, #212]	; (8000bb8 <HAL_RCC_ClockConfig+0x178>)
 8000ae4:	2a01      	cmp	r2, #1
 8000ae6:	d128      	bne.n	8000b3a <HAL_RCC_ClockConfig+0xfa>
 8000ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aec:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af0:	6821      	ldr	r1, [r4, #0]
 8000af2:	fa93 f3a3 	rbit	r3, r3
 8000af6:	fab3 f383 	clz	r3, r3
 8000afa:	f003 031f 	and.w	r3, r3, #31
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b04:	d0e1      	beq.n	8000aca <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b06:	6863      	ldr	r3, [r4, #4]
 8000b08:	f023 0303 	bic.w	r3, r3, #3
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8000b10:	f7ff fb8e 	bl	8000230 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b14:	6873      	ldr	r3, [r6, #4]
 8000b16:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8000b18:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b1e:	d11f      	bne.n	8000b60 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b20:	6863      	ldr	r3, [r4, #4]
 8000b22:	f003 030c 	and.w	r3, r3, #12
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d099      	beq.n	8000a5e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b2a:	f7ff fb81 	bl	8000230 <HAL_GetTick>
 8000b2e:	1bc0      	subs	r0, r0, r7
 8000b30:	4540      	cmp	r0, r8
 8000b32:	d9f5      	bls.n	8000b20 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8000b34:	2003      	movs	r0, #3
 8000b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b3a:	2a02      	cmp	r2, #2
 8000b3c:	bf0c      	ite	eq
 8000b3e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b42:	2302      	movne	r3, #2
 8000b44:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b48:	6820      	ldr	r0, [r4, #0]
 8000b4a:	fa93 f3a3 	rbit	r3, r3
 8000b4e:	fab3 f383 	clz	r3, r3
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	2101      	movs	r1, #1
 8000b58:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5c:	4203      	tst	r3, r0
 8000b5e:	e7d1      	b.n	8000b04 <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d110      	bne.n	8000b86 <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	f003 030c 	and.w	r3, r3, #12
 8000b6a:	2b08      	cmp	r3, #8
 8000b6c:	f43f af77 	beq.w	8000a5e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b70:	f7ff fb5e 	bl	8000230 <HAL_GetTick>
 8000b74:	1bc0      	subs	r0, r0, r7
 8000b76:	4540      	cmp	r0, r8
 8000b78:	d9f4      	bls.n	8000b64 <HAL_RCC_ClockConfig+0x124>
 8000b7a:	e7db      	b.n	8000b34 <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b7c:	f7ff fb58 	bl	8000230 <HAL_GetTick>
 8000b80:	1bc0      	subs	r0, r0, r7
 8000b82:	4540      	cmp	r0, r8
 8000b84:	d8d6      	bhi.n	8000b34 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b86:	6863      	ldr	r3, [r4, #4]
 8000b88:	f013 0f0c 	tst.w	r3, #12
 8000b8c:	d1f6      	bne.n	8000b7c <HAL_RCC_ClockConfig+0x13c>
 8000b8e:	e766      	b.n	8000a5e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b90:	6813      	ldr	r3, [r2, #0]
 8000b92:	f023 0307 	bic.w	r3, r3, #7
 8000b96:	432b      	orrs	r3, r5
 8000b98:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	f003 0307 	and.w	r3, r3, #7
 8000ba0:	429d      	cmp	r5, r3
 8000ba2:	d192      	bne.n	8000aca <HAL_RCC_ClockConfig+0x8a>
 8000ba4:	e762      	b.n	8000a6c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ba6:	6863      	ldr	r3, [r4, #4]
 8000ba8:	68f1      	ldr	r1, [r6, #12]
 8000baa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bae:	430b      	orrs	r3, r1
 8000bb0:	6063      	str	r3, [r4, #4]
 8000bb2:	e761      	b.n	8000a78 <HAL_RCC_ClockConfig+0x38>
 8000bb4:	40022000 	.word	0x40022000
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	0800144c 	.word	0x0800144c
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bc4:	4b01      	ldr	r3, [pc, #4]	; (8000bcc <HAL_RCC_GetHCLKFreq+0x8>)
 8000bc6:	6818      	ldr	r0, [r3, #0]
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000000 	.word	0x20000000

08000bd0 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bd0:	6803      	ldr	r3, [r0, #0]
{
 8000bd2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bd6:	03df      	lsls	r7, r3, #15
{
 8000bd8:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bda:	d523      	bpl.n	8000c24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bdc:	4d9b      	ldr	r5, [pc, #620]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000bde:	69eb      	ldr	r3, [r5, #28]
 8000be0:	00de      	lsls	r6, r3, #3
 8000be2:	f100 80d7 	bmi.w	8000d94 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000be6:	69eb      	ldr	r3, [r5, #28]
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	61eb      	str	r3, [r5, #28]
 8000bee:	69eb      	ldr	r3, [r5, #28]
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000bf8:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bfa:	4f95      	ldr	r7, [pc, #596]	; (8000e50 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	05d8      	lsls	r0, r3, #23
 8000c00:	f140 80ca 	bpl.w	8000d98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c04:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c06:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c0a:	f040 80da 	bne.w	8000dc2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c0e:	6a2b      	ldr	r3, [r5, #32]
 8000c10:	6862      	ldr	r2, [r4, #4]
 8000c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c16:	4313      	orrs	r3, r2
 8000c18:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c1a:	b11e      	cbz	r6, 8000c24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c1c:	69eb      	ldr	r3, [r5, #28]
 8000c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c22:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c24:	6820      	ldr	r0, [r4, #0]
 8000c26:	07c3      	lsls	r3, r0, #31
 8000c28:	d506      	bpl.n	8000c38 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c2a:	4a88      	ldr	r2, [pc, #544]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c2c:	68a1      	ldr	r1, [r4, #8]
 8000c2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c30:	f023 0303 	bic.w	r3, r3, #3
 8000c34:	430b      	orrs	r3, r1
 8000c36:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000c38:	0787      	lsls	r7, r0, #30
 8000c3a:	d506      	bpl.n	8000c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000c3c:	4a83      	ldr	r2, [pc, #524]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c3e:	68e1      	ldr	r1, [r4, #12]
 8000c40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000c46:	430b      	orrs	r3, r1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000c4a:	0746      	lsls	r6, r0, #29
 8000c4c:	d506      	bpl.n	8000c5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000c4e:	4a7f      	ldr	r2, [pc, #508]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c50:	6921      	ldr	r1, [r4, #16]
 8000c52:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c54:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000c58:	430b      	orrs	r3, r1
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c5c:	0685      	lsls	r5, r0, #26
 8000c5e:	d506      	bpl.n	8000c6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c60:	4a7a      	ldr	r2, [pc, #488]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c62:	69e1      	ldr	r1, [r4, #28]
 8000c64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c66:	f023 0310 	bic.w	r3, r3, #16
 8000c6a:	430b      	orrs	r3, r1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000c6e:	0381      	lsls	r1, r0, #14
 8000c70:	d506      	bpl.n	8000c80 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8000c72:	4a76      	ldr	r2, [pc, #472]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c74:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000c76:	6853      	ldr	r3, [r2, #4]
 8000c78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000c80:	0642      	lsls	r2, r0, #25
 8000c82:	d506      	bpl.n	8000c92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000c84:	4a71      	ldr	r2, [pc, #452]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c86:	6a21      	ldr	r1, [r4, #32]
 8000c88:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c8a:	f023 0320 	bic.w	r3, r3, #32
 8000c8e:	430b      	orrs	r3, r1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000c92:	0343      	lsls	r3, r0, #13
 8000c94:	d506      	bpl.n	8000ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000c96:	4a6d      	ldr	r2, [pc, #436]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000c98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000ca4:	0707      	lsls	r7, r0, #28
 8000ca6:	d506      	bpl.n	8000cb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000ca8:	4a68      	ldr	r2, [pc, #416]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000caa:	6961      	ldr	r1, [r4, #20]
 8000cac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000cb6:	06c6      	lsls	r6, r0, #27
 8000cb8:	d506      	bpl.n	8000cc8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000cba:	4a64      	ldr	r2, [pc, #400]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cbc:	69a1      	ldr	r1, [r4, #24]
 8000cbe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000cc0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000cc4:	430b      	orrs	r3, r1
 8000cc6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8000cc8:	0585      	lsls	r5, r0, #22
 8000cca:	d506      	bpl.n	8000cda <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8000ccc:	4a5f      	ldr	r2, [pc, #380]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000cd0:	6853      	ldr	r3, [r2, #4]
 8000cd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000cda:	0601      	lsls	r1, r0, #24
 8000cdc:	d506      	bpl.n	8000cec <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000cde:	4a5b      	ldr	r2, [pc, #364]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000ce0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000ce2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000ce4:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8000cec:	05c2      	lsls	r2, r0, #23
 8000cee:	d506      	bpl.n	8000cfe <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8000cf0:	4a56      	ldr	r2, [pc, #344]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000cf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000cf4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000cf6:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000cfe:	04c3      	lsls	r3, r0, #19
 8000d00:	d506      	bpl.n	8000d10 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000d02:	4a52      	ldr	r2, [pc, #328]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d06:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d0c:	430b      	orrs	r3, r1
 8000d0e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8000d10:	0487      	lsls	r7, r0, #18
 8000d12:	d506      	bpl.n	8000d22 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8000d14:	4a4d      	ldr	r2, [pc, #308]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000d18:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d1a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8000d22:	02c6      	lsls	r6, r0, #11
 8000d24:	d506      	bpl.n	8000d34 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8000d26:	4a49      	ldr	r2, [pc, #292]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000d2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d30:	430b      	orrs	r3, r1
 8000d32:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8000d34:	0285      	lsls	r5, r0, #10
 8000d36:	d506      	bpl.n	8000d46 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8000d38:	4a44      	ldr	r2, [pc, #272]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d3a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000d3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d3e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000d42:	430b      	orrs	r3, r1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8000d46:	0241      	lsls	r1, r0, #9
 8000d48:	d506      	bpl.n	8000d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8000d4a:	4a40      	ldr	r2, [pc, #256]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000d4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d54:	430b      	orrs	r3, r1
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8000d58:	0202      	lsls	r2, r0, #8
 8000d5a:	d506      	bpl.n	8000d6a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8000d5c:	4a3b      	ldr	r2, [pc, #236]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d5e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000d60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d66:	430b      	orrs	r3, r1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8000d6a:	01c3      	lsls	r3, r0, #7
 8000d6c:	d506      	bpl.n	8000d7c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8000d6e:	4a37      	ldr	r2, [pc, #220]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d70:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000d72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8000d7c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8000d80:	d01c      	beq.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8000d82:	4a32      	ldr	r2, [pc, #200]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8000d84:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000d86:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000d90:	2000      	movs	r0, #0
 8000d92:	e013      	b.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    FlagStatus       pwrclkchanged = RESET;
 8000d94:	2600      	movs	r6, #0
 8000d96:	e730      	b.n	8000bfa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000da0:	f7ff fa46 	bl	8000230 <HAL_GetTick>
 8000da4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	05d9      	lsls	r1, r3, #23
 8000daa:	f53f af2b 	bmi.w	8000c04 <HAL_RCCEx_PeriphCLKConfig+0x34>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dae:	f7ff fa3f 	bl	8000230 <HAL_GetTick>
 8000db2:	eba0 0008 	sub.w	r0, r0, r8
 8000db6:	2864      	cmp	r0, #100	; 0x64
 8000db8:	d9f5      	bls.n	8000da6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8000dba:	2003      	movs	r0, #3
}
 8000dbc:	b002      	add	sp, #8
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dc2:	6862      	ldr	r2, [r4, #4]
 8000dc4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	f43f af20 	beq.w	8000c0e <HAL_RCCEx_PeriphCLKConfig+0x3e>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dce:	6a29      	ldr	r1, [r5, #32]
 8000dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd4:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000dd8:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ddc:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000e54 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	4472      	add	r2, lr
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	2701      	movs	r7, #1
 8000dea:	6017      	str	r7, [r2, #0]
 8000dec:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000df0:	fab3 f383 	clz	r3, r3
 8000df4:	4473      	add	r3, lr
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000dfc:	07ca      	lsls	r2, r1, #31
      RCC->BDCR = temp_reg;
 8000dfe:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e00:	f57f af05 	bpl.w	8000c0e <HAL_RCCEx_PeriphCLKConfig+0x3e>
        tickstart = HAL_GetTick();
 8000e04:	f7ff fa14 	bl	8000230 <HAL_GetTick>
 8000e08:	f04f 0802 	mov.w	r8, #2
 8000e0c:	4682      	mov	sl, r0
 8000e0e:	46c1      	mov	r9, r8
 8000e10:	fa98 f3a8 	rbit	r3, r8
 8000e14:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e18:	b1a3      	cbz	r3, 8000e44 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8000e1a:	6a2a      	ldr	r2, [r5, #32]
 8000e1c:	fa99 f3a9 	rbit	r3, r9
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	fa07 f303 	lsl.w	r3, r7, r3
 8000e2c:	4213      	tst	r3, r2
 8000e2e:	f47f aeee 	bne.w	8000c0e <HAL_RCCEx_PeriphCLKConfig+0x3e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e32:	f7ff f9fd 	bl	8000230 <HAL_GetTick>
 8000e36:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e3a:	eba0 000a 	sub.w	r0, r0, sl
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d9e6      	bls.n	8000e10 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8000e42:	e7ba      	b.n	8000dba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8000e44:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e48:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e4a:	e7e7      	b.n	8000e1c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40007000 	.word	0x40007000
 8000e54:	10908100 	.word	0x10908100

08000e58 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e58:	4a32      	ldr	r2, [pc, #200]	; (8000f24 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 8000e5a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	d012      	beq.n	8000e86 <TIM_Base_SetConfig+0x2e>
 8000e60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e64:	d00f      	beq.n	8000e86 <TIM_Base_SetConfig+0x2e>
 8000e66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000e6a:	4290      	cmp	r0, r2
 8000e6c:	d00b      	beq.n	8000e86 <TIM_Base_SetConfig+0x2e>
 8000e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d007      	beq.n	8000e86 <TIM_Base_SetConfig+0x2e>
 8000e76:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000e7a:	4290      	cmp	r0, r2
 8000e7c:	d003      	beq.n	8000e86 <TIM_Base_SetConfig+0x2e>
 8000e7e:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d115      	bne.n	8000eb2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e86:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e8c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e8e:	4a25      	ldr	r2, [pc, #148]	; (8000f24 <TIM_Base_SetConfig+0xcc>)
 8000e90:	4290      	cmp	r0, r2
 8000e92:	d01d      	beq.n	8000ed0 <TIM_Base_SetConfig+0x78>
 8000e94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e98:	d01a      	beq.n	8000ed0 <TIM_Base_SetConfig+0x78>
 8000e9a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000e9e:	4290      	cmp	r0, r2
 8000ea0:	d016      	beq.n	8000ed0 <TIM_Base_SetConfig+0x78>
 8000ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	d012      	beq.n	8000ed0 <TIM_Base_SetConfig+0x78>
 8000eaa:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8000eae:	4290      	cmp	r0, r2
 8000eb0:	d00e      	beq.n	8000ed0 <TIM_Base_SetConfig+0x78>
 8000eb2:	4a1d      	ldr	r2, [pc, #116]	; (8000f28 <TIM_Base_SetConfig+0xd0>)
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	d00b      	beq.n	8000ed0 <TIM_Base_SetConfig+0x78>
 8000eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ebc:	4290      	cmp	r0, r2
 8000ebe:	d007      	beq.n	8000ed0 <TIM_Base_SetConfig+0x78>
 8000ec0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ec4:	4290      	cmp	r0, r2
 8000ec6:	d003      	beq.n	8000ed0 <TIM_Base_SetConfig+0x78>
 8000ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000ecc:	4290      	cmp	r0, r2
 8000ece:	d103      	bne.n	8000ed8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ed0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ed6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ed8:	694a      	ldr	r2, [r1, #20]
 8000eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ede:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000ee0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ee2:	688b      	ldr	r3, [r1, #8]
 8000ee4:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000ee6:	680b      	ldr	r3, [r1, #0]
 8000ee8:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <TIM_Base_SetConfig+0xcc>)
 8000eec:	4298      	cmp	r0, r3
 8000eee:	d013      	beq.n	8000f18 <TIM_Base_SetConfig+0xc0>
 8000ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000ef4:	4298      	cmp	r0, r3
 8000ef6:	d00f      	beq.n	8000f18 <TIM_Base_SetConfig+0xc0>
 8000ef8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8000efc:	4298      	cmp	r0, r3
 8000efe:	d00b      	beq.n	8000f18 <TIM_Base_SetConfig+0xc0>
 8000f00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f04:	4298      	cmp	r0, r3
 8000f06:	d007      	beq.n	8000f18 <TIM_Base_SetConfig+0xc0>
 8000f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f0c:	4298      	cmp	r0, r3
 8000f0e:	d003      	beq.n	8000f18 <TIM_Base_SetConfig+0xc0>
 8000f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f14:	4298      	cmp	r0, r3
 8000f16:	d101      	bne.n	8000f1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000f18:	690b      	ldr	r3, [r1, #16]
 8000f1a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	6143      	str	r3, [r0, #20]
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40012c00 	.word	0x40012c00
 8000f28:	40014000 	.word	0x40014000

08000f2c <HAL_TIM_Base_Init>:
{ 
 8000f2c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f2e:	4604      	mov	r4, r0
 8000f30:	b1a0      	cbz	r0, 8000f5c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f3a:	b91b      	cbnz	r3, 8000f44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f40:	f000 f9c2 	bl	80012c8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f44:	2302      	movs	r3, #2
 8000f46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f4a:	6820      	ldr	r0, [r4, #0]
 8000f4c:	1d21      	adds	r1, r4, #4
 8000f4e:	f7ff ff83 	bl	8000e58 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f52:	2301      	movs	r3, #1
 8000f54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f58:	2000      	movs	r0, #0
 8000f5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f5c:	2001      	movs	r0, #1
}
 8000f5e:	bd10      	pop	{r4, pc}

08000f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000f60:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000f62:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f64:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f66:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000f6a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000f6e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000f70:	6083      	str	r3, [r0, #8]
 8000f72:	bd10      	pop	{r4, pc}

08000f74 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000f74:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f78:	2b01      	cmp	r3, #1
{
 8000f7a:	b570      	push	{r4, r5, r6, lr}
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000f82:	d01a      	beq.n	8000fba <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f84:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000f88:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000f90:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f92:	4b52      	ldr	r3, [pc, #328]	; (80010dc <HAL_TIM_ConfigClockSource+0x168>)
 8000f94:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000f96:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000f98:	680b      	ldr	r3, [r1, #0]
 8000f9a:	2b40      	cmp	r3, #64	; 0x40
 8000f9c:	d075      	beq.n	800108a <HAL_TIM_ConfigClockSource+0x116>
 8000f9e:	d818      	bhi.n	8000fd2 <HAL_TIM_ConfigClockSource+0x5e>
 8000fa0:	2b10      	cmp	r3, #16
 8000fa2:	f000 808f 	beq.w	80010c4 <HAL_TIM_ConfigClockSource+0x150>
 8000fa6:	d809      	bhi.n	8000fbc <HAL_TIM_ConfigClockSource+0x48>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8085 	beq.w	80010b8 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8000fae:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000fb0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000fb2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000fb6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000fba:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000fbc:	2b20      	cmp	r3, #32
 8000fbe:	f000 8087 	beq.w	80010d0 <HAL_TIM_ConfigClockSource+0x15c>
 8000fc2:	2b30      	cmp	r3, #48	; 0x30
 8000fc4:	d1f3      	bne.n	8000fae <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8000fc6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fcc:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8000fd0:	e033      	b.n	800103a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000fd2:	2b70      	cmp	r3, #112	; 0x70
 8000fd4:	d033      	beq.n	800103e <HAL_TIM_ConfigClockSource+0xca>
 8000fd6:	d81b      	bhi.n	8001010 <HAL_TIM_ConfigClockSource+0x9c>
 8000fd8:	2b50      	cmp	r3, #80	; 0x50
 8000fda:	d03f      	beq.n	800105c <HAL_TIM_ConfigClockSource+0xe8>
 8000fdc:	2b60      	cmp	r3, #96	; 0x60
 8000fde:	d1e6      	bne.n	8000fae <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000fe0:	684d      	ldr	r5, [r1, #4]
 8000fe2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000fe4:	6a01      	ldr	r1, [r0, #32]
 8000fe6:	f021 0110 	bic.w	r1, r1, #16
 8000fea:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000fec:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000fee:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ff0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ff8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ffc:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001000:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001002:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001004:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800100a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800100e:	e014      	b.n	800103a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001014:	d00c      	beq.n	8001030 <HAL_TIM_ConfigClockSource+0xbc>
 8001016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800101a:	d1c8      	bne.n	8000fae <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 800101c:	68cb      	ldr	r3, [r1, #12]
 800101e:	684a      	ldr	r2, [r1, #4]
 8001020:	6889      	ldr	r1, [r1, #8]
 8001022:	f7ff ff9d 	bl	8000f60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001026:	6822      	ldr	r2, [r4, #0]
 8001028:	6893      	ldr	r3, [r2, #8]
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	e013      	b.n	8001058 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001030:	6883      	ldr	r3, [r0, #8]
 8001032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001036:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800103a:	6083      	str	r3, [r0, #8]
 800103c:	e7b7      	b.n	8000fae <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 800103e:	68cb      	ldr	r3, [r1, #12]
 8001040:	684a      	ldr	r2, [r1, #4]
 8001042:	6889      	ldr	r1, [r1, #8]
 8001044:	f7ff ff8c 	bl	8000f60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001048:	6822      	ldr	r2, [r4, #0]
 800104a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800104c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001050:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001058:	6093      	str	r3, [r2, #8]
    break;
 800105a:	e7a8      	b.n	8000fae <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800105c:	684a      	ldr	r2, [r1, #4]
 800105e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001060:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001062:	6a05      	ldr	r5, [r0, #32]
 8001064:	f025 0501 	bic.w	r5, r5, #1
 8001068:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800106a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800106c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001070:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001074:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001078:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800107a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800107c:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 800107e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001084:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001088:	e7d7      	b.n	800103a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800108a:	684a      	ldr	r2, [r1, #4]
 800108c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800108e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001090:	6a05      	ldr	r5, [r0, #32]
 8001092:	f025 0501 	bic.w	r5, r5, #1
 8001096:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001098:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800109a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800109e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80010a2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80010a6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80010a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80010aa:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80010ac:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80010b2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80010b6:	e7c0      	b.n	800103a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80010b8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80010be:	f043 0307 	orr.w	r3, r3, #7
 80010c2:	e7ba      	b.n	800103a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80010c4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80010ca:	f043 0317 	orr.w	r3, r3, #23
 80010ce:	e7b4      	b.n	800103a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80010d0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80010d6:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80010da:	e7ae      	b.n	800103a <HAL_TIM_ConfigClockSource+0xc6>
 80010dc:	fffe0088 	.word	0xfffe0088

080010e0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80010e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010e4:	2b01      	cmp	r3, #1
{
 80010e6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80010e8:	d020      	beq.n	800112c <HAL_TIMEx_MasterConfigSynchronization+0x4c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80010ea:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80010ec:	4d10      	ldr	r5, [pc, #64]	; (8001130 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
  tmpcr2 = htim->Instance->CR2;
 80010ee:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80010f0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80010f2:	42aa      	cmp	r2, r5
 80010f4:	d007      	beq.n	8001106 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80010f6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80010fa:	42aa      	cmp	r2, r5
 80010fc:	d003      	beq.n	8001106 <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80010fe:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8001102:	42aa      	cmp	r2, r5
 8001104:	d103      	bne.n	800110e <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001106:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001108:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800110c:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800110e:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001110:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001116:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001118:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800111c:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800111e:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001120:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001122:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001124:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001128:	4618      	mov	r0, r3
 800112a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 800112c:	2002      	movs	r0, #2
} 
 800112e:	bd30      	pop	{r4, r5, pc}
 8001130:	40012c00 	.word	0x40012c00

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b510      	push	{r4, lr}
 8001136:	b0a6      	sub	sp, #152	; 0x98
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001140:	2310      	movs	r3, #16
 8001142:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001146:	2300      	movs	r3, #0
 8001148:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f7ff f9cf 	bl	80004ec <HAL_RCC_OscConfig>
 800114e:	4601      	mov	r1, r0
 8001150:	b100      	cbz	r0, 8001154 <SystemClock_Config+0x20>
 8001152:	e7fe      	b.n	8001152 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001154:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001156:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800115a:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001162:	f7ff fc6d 	bl	8000a40 <HAL_RCC_ClockConfig>
 8001166:	b100      	cbz	r0, 800116a <SystemClock_Config+0x36>
 8001168:	e7fe      	b.n	8001168 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800116e:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001172:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001174:	f7ff fd2c 	bl	8000bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001178:	4604      	mov	r4, r0
 800117a:	b100      	cbz	r0, 800117e <SystemClock_Config+0x4a>
 800117c:	e7fe      	b.n	800117c <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800117e:	f7ff fd21 	bl	8000bc4 <HAL_RCC_GetHCLKFreq>
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb0 f0f3 	udiv	r0, r0, r3
 800118a:	f7ff f8ad 	bl	80002e8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800118e:	2004      	movs	r0, #4
 8001190:	f7ff f8c0 	bl	8000314 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001194:	4622      	mov	r2, r4
 8001196:	4621      	mov	r1, r4
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff f870 	bl	8000280 <HAL_NVIC_SetPriority>
}
 80011a0:	b026      	add	sp, #152	; 0x98
 80011a2:	bd10      	pop	{r4, pc}

080011a4 <main>:
{
 80011a4:	b500      	push	{lr}
 80011a6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80011a8:	f7ff f828 	bl	80001fc <HAL_Init>
  SystemClock_Config();
 80011ac:	f7ff ffc2 	bl	8001134 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <main+0x9c>)
  htim1.Instance = TIM1;
 80011b2:	4c24      	ldr	r4, [pc, #144]	; (8001244 <main+0xa0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	9301      	str	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2140      	movs	r1, #64	; 0x40
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80011ce:	f7ff f983 	bl	80004d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011d2:	2320      	movs	r3, #32
 80011d4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
 80011d8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011da:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f7ff f8a7 	bl	8000338 <HAL_GPIO_Init>
  htim1.Instance = TIM1;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <main+0xa4>)
 80011ec:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ee:	4620      	mov	r0, r4
  htim1.Init.Prescaler = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 0;
 80011f6:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80011fa:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fc:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011fe:	f7ff fe95 	bl	8000f2c <HAL_TIM_Base_Init>
 8001202:	b100      	cbz	r0, 8001206 <main+0x62>
 8001204:	e7fe      	b.n	8001204 <main+0x60>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800120a:	a905      	add	r1, sp, #20
 800120c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001210:	f7ff feb0 	bl	8000f74 <HAL_TIM_ConfigClockSource>
 8001214:	b100      	cbz	r0, 8001218 <main+0x74>
 8001216:	e7fe      	b.n	8001216 <main+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121a:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121c:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800121e:	a902      	add	r1, sp, #8
 8001220:	4620      	mov	r0, r4
 8001222:	f7ff ff5d 	bl	80010e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001226:	b100      	cbz	r0, 800122a <main+0x86>
 8001228:	e7fe      	b.n	8001228 <main+0x84>
	  HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800122a:	2120      	movs	r1, #32
 800122c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001230:	f7ff f957 	bl	80004e2 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001238:	f7ff f800 	bl	800023c <HAL_Delay>
 800123c:	e7f5      	b.n	800122a <main+0x86>
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	20000024 	.word	0x20000024
 8001248:	40012c00 	.word	0x40012c00

0800124c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_MspInit+0x78>)
{
 800124e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001262:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	f7fe fffa 	bl	800025c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	4611      	mov	r1, r2
 800126c:	f06f 000b 	mvn.w	r0, #11
 8001270:	f7ff f806 	bl	8000280 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	4611      	mov	r1, r2
 8001278:	f06f 000a 	mvn.w	r0, #10
 800127c:	f7ff f800 	bl	8000280 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	4611      	mov	r1, r2
 8001284:	f06f 0009 	mvn.w	r0, #9
 8001288:	f7fe fffa 	bl	8000280 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	4611      	mov	r1, r2
 8001290:	f06f 0004 	mvn.w	r0, #4
 8001294:	f7fe fff4 	bl	8000280 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	4611      	mov	r1, r2
 800129c:	f06f 0003 	mvn.w	r0, #3
 80012a0:	f7fe ffee 	bl	8000280 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	4611      	mov	r1, r2
 80012a8:	f06f 0001 	mvn.w	r0, #1
 80012ac:	f7fe ffe8 	bl	8000280 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	4611      	mov	r1, r2
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7fe ffe2 	bl	8000280 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012bc:	b003      	add	sp, #12
 80012be:	f85d fb04 	ldr.w	pc, [sp], #4
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000

080012c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 80012c8:	6802      	ldr	r2, [r0, #0]
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_TIM_Base_MspInit+0x24>)
 80012cc:	429a      	cmp	r2, r3
{
 80012ce:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80012d0:	d10a      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012d2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80012d6:	699a      	ldr	r2, [r3, #24]
 80012d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012dc:	619a      	str	r2, [r3, #24]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012e8:	b002      	add	sp, #8
 80012ea:	4770      	bx	lr
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <NMI_Handler>:
 80012f0:	4770      	bx	lr

080012f2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler>

080012f4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80012f4:	e7fe      	b.n	80012f4 <MemManage_Handler>

080012f6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler>

080012f8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler>

080012fa <SVC_Handler>:
 80012fa:	4770      	bx	lr

080012fc <DebugMon_Handler>:
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001300:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001302:	f7fe ff8d 	bl	8000220 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800130a:	f7ff b810 	b.w	800032e <HAL_SYSTICK_IRQHandler>
	...

08001310 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4915      	ldr	r1, [pc, #84]	; (8001368 <SystemInit+0x58>)
 8001312:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001316:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800131e:	4b13      	ldr	r3, [pc, #76]	; (800136c <SystemInit+0x5c>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001328:	6858      	ldr	r0, [r3, #4]
 800132a:	4a11      	ldr	r2, [pc, #68]	; (8001370 <SystemInit+0x60>)
 800132c:	4002      	ands	r2, r0
 800132e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001336:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800133a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001342:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800134a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800134c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134e:	f022 020f 	bic.w	r2, r2, #15
 8001352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001356:	4a07      	ldr	r2, [pc, #28]	; (8001374 <SystemInit+0x64>)
 8001358:	4002      	ands	r2, r0
 800135a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001364:	608b      	str	r3, [r1, #8]
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00
 800136c:	40021000 	.word	0x40021000
 8001370:	f87fc00c 	.word	0xf87fc00c
 8001374:	ff00fccc 	.word	0xff00fccc

08001378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800137c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800137e:	e003      	b.n	8001388 <LoopCopyDataInit>

08001380 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001382:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001384:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001386:	3104      	adds	r1, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001388:	480b      	ldr	r0, [pc, #44]	; (80013b8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <LoopForever+0xe>)
	adds	r2, r0, r1
 800138c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800138e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001390:	d3f6      	bcc.n	8001380 <CopyDataInit>
	ldr	r2, =_sbss
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001394:	e002      	b.n	800139c <LoopFillZerobss>

08001396 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001396:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001398:	f842 3b04 	str.w	r3, [r2], #4

0800139c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <LoopForever+0x16>)
	cmp	r2, r3
 800139e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013a0:	d3f9      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013a2:	f7ff ffb5 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f000 f811 	bl	80013cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013aa:	f7ff fefb 	bl	80011a4 <main>

080013ae <LoopForever>:

LoopForever:
    b LoopForever
 80013ae:	e7fe      	b.n	80013ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013b0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80013b4:	08001464 	.word	0x08001464
	ldr	r0, =_sdata
 80013b8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013bc:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 80013c0:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 80013c4:	20000064 	.word	0x20000064

080013c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_2_IRQHandler>
	...

080013cc <__libc_init_array>:
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	4e0d      	ldr	r6, [pc, #52]	; (8001404 <__libc_init_array+0x38>)
 80013d0:	4c0d      	ldr	r4, [pc, #52]	; (8001408 <__libc_init_array+0x3c>)
 80013d2:	1ba4      	subs	r4, r4, r6
 80013d4:	10a4      	asrs	r4, r4, #2
 80013d6:	2500      	movs	r5, #0
 80013d8:	42a5      	cmp	r5, r4
 80013da:	d109      	bne.n	80013f0 <__libc_init_array+0x24>
 80013dc:	4e0b      	ldr	r6, [pc, #44]	; (800140c <__libc_init_array+0x40>)
 80013de:	4c0c      	ldr	r4, [pc, #48]	; (8001410 <__libc_init_array+0x44>)
 80013e0:	f000 f818 	bl	8001414 <_init>
 80013e4:	1ba4      	subs	r4, r4, r6
 80013e6:	10a4      	asrs	r4, r4, #2
 80013e8:	2500      	movs	r5, #0
 80013ea:	42a5      	cmp	r5, r4
 80013ec:	d105      	bne.n	80013fa <__libc_init_array+0x2e>
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013f4:	4798      	blx	r3
 80013f6:	3501      	adds	r5, #1
 80013f8:	e7ee      	b.n	80013d8 <__libc_init_array+0xc>
 80013fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013fe:	4798      	blx	r3
 8001400:	3501      	adds	r5, #1
 8001402:	e7f2      	b.n	80013ea <__libc_init_array+0x1e>
 8001404:	0800145c 	.word	0x0800145c
 8001408:	0800145c 	.word	0x0800145c
 800140c:	0800145c 	.word	0x0800145c
 8001410:	08001460 	.word	0x08001460

08001414 <_init>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	bf00      	nop
 8001418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800141a:	bc08      	pop	{r3}
 800141c:	469e      	mov	lr, r3
 800141e:	4770      	bx	lr

08001420 <_fini>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	bf00      	nop
 8001424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001426:	bc08      	pop	{r3}
 8001428:	469e      	mov	lr, r3
 800142a:	4770      	bx	lr
